/***********************************************************************
 * Copyright(C) 2021 深圳市电应普科技
 * 文件	:	a05.ino
 * 描述	:   读取传感器数据（支持FF/Modbus/DYP协议,通过修改 MODULE_VER 适配），将测距信息打印到 PC 串口
 *          A1 连接传感器 RX 引脚,A0 连接传感器 TX 引脚
 *          此例程仅在 arduino uno 开发板上测试通过,包含 SoftwareSerial 第 3 方库,请自行添加
 *
 * 版本与日期  作者  说明
 * 211030-A0  CH    创建了该文件
 * 211102-A0  CH    添加 FF/Modbus/DYP 协议支持
 * 211123-A0  CH    FF 协议增加帧头判断,modbus 增加功能判断
 * 211130-A0  CH    修复 FF 协议,增大显示缓冲区,防止溢出
 * 211130-A1  CH    修改 MB_VER 协议解析方式
 ***********************************************************************/
/* 包含头文件 -------------------------------------------------------------------*/
#include <Arduino.h>
#include <SoftwareSerial.h>

/* 宏定义 -----------------------------------------------------------------------*/
#define SOFT_VERSION "A05-211130-A1"  //软件版本

#define FF_VER     1  // ff 协议
#define MB_VER     2  // modbus 协议
#define DYP_VER    3  // dyp 协议
#define MODULE_VER FF_VER

#define COM_TX_PIN A1  // 开发板模拟串口 TX 引脚
#define COM_RX_PIN A0  // 开发板模拟串口 RX 引脚

/* 类型定义 ---------------------------------------------------------------------*/
/* 私有变量 ---------------------------------------------------------------------*/
SoftwareSerial softSerial( COM_RX_PIN, COM_TX_PIN );  // 软件模拟串口

/* Table of CRC values for high-order byte */
#if defined( ARDUINO ) && defined( __AVR__ )
static PROGMEM const uint8_t table_crc_hi[] = {
#else
static const uint8_t table_crc_hi[] = {
#endif
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
};

/* Table of CRC values for low-order byte */
#if defined( ARDUINO ) && defined( __AVR__ )
#include <avr/pgmspace.h>
static PROGMEM const uint8_t table_crc_lo[] = {
#else
static const uint8_t table_crc_lo[] = {
#endif
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8,
    0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10,
    0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
    0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0,
    0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
    0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98,
    0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};
/* 扩展变量 ---------------------------------------------------------------------*/
/* 函数声明 ---------------------------------------------------------------------*/
uint16_t crc16( uint8_t* buffer, uint16_t buffer_length );
/* 函数实现 ---------------------------------------------------------------------*/
void digital_toggle( uint8_t pin )
{
    digitalRead( pin ) ? digitalWrite( pin, 0 ) : digitalWrite( pin, 1 );
}

uint16_t crc16( uint8_t* buffer, uint16_t buffer_length )
{
    uint8_t      crc_hi = 0xFF; /* high CRC byte initialized */
    uint8_t      crc_lo = 0xFF; /* low CRC byte initialized */
    unsigned int i;             /* will index into CRC lookup */

    /* pass through message buffer */
    while ( buffer_length-- )
    {
        i = crc_hi ^ *buffer++; /* calculate the CRC  */
#if defined( ARDUINO ) && defined( __AVR__ )
        crc_hi = crc_lo ^ pgm_read_byte_near( table_crc_hi + i );
        crc_lo = pgm_read_byte_near( table_crc_lo + i );
#else
        crc_hi = crc_lo ^ table_crc_hi[ i ];
        crc_lo = table_crc_lo[ i ];
#endif
    }

    return ( crc_hi << 8 | crc_lo );
}
uint8_t add_sum( uint8_t* _buf, uint16_t _len )
{
    uint8_t ret = 0;
    for ( int i = 0; i < _len; i++ ) ret += _buf[ i ];
    return ret;
}

void setup()
{
    // put your setup code here, to run once:
    pinMode( LED_BUILTIN, OUTPUT );
    Serial.begin( 9600 );
    Serial.println( SOFT_VERSION );
    softSerial.begin( 9600 );
}

void loop()
{
/*  单个探头进行距离测量指令特征码：0X10～0X13
 *          帧头           地址  指令   数据            校验和
 *   主机发  0X55    0XAA   0X01  0X10  无      无      checksum
 *   从机回  0X55    0XAA   0X01  0X10  Data_H  Data_L  checksum
 *   多个探头进行距离测量指令特征码：0X01
 *          帧头      地址 指令  数据                          校验和
 *   主机发  0X55 0XAA 0X01 0X01  无  无  无  无  无  无 无 无  checksum
 *   从机回  0X55 0XAA 0X01 0X01  DH  DL  DH  DL DH  DL DH DL  checksum
 */
#if MODULE_VER == DYP_VER
    static uint32_t send_timecnt = 0;
    if ( millis() - send_timecnt > 500 )
    {
        uint8_t send_cmd_buf[] = { 0x55, 0xaa, 0x01, 0x01, 0x01 };  // 读取多个传感器数据
        // uint8_t send_cmd_buf[] = { 0x55, 0xaa, 0x01, 0x10, 0x10 };  // 读取单个传感器数据
        softSerial.write( send_cmd_buf, sizeof( send_cmd_buf ) );

        uint8_t cmd                   = send_cmd_buf[ 3 ];
        uint8_t sensor_recv_buf[ 20 ] = { 0 };

        {
            uint16_t len              = softSerial.readBytes( sensor_recv_buf, 13 );
            uint8_t  calc_add_sum_val = add_sum( sensor_recv_buf, len - 1 );
            uint8_t  recv_add_sum_val = sensor_recv_buf[ len - 1 ];

            if ( len && sensor_recv_buf[ 0 ] == 0x55 && sensor_recv_buf[ 1 ] == 0xaa && calc_add_sum_val == recv_add_sum_val )  //{} 指令解析正确
            {
                uint16_t sensor1_distance = sensor_recv_buf[ 4 ] << 8 | sensor_recv_buf[ 5 ];
                uint16_t sensor2_distance = sensor_recv_buf[ 6 ] << 8 | sensor_recv_buf[ 7 ];
                uint16_t sensor3_distance = sensor_recv_buf[ 8 ] << 8 | sensor_recv_buf[ 9 ];
                uint16_t sensor4_distance = sensor_recv_buf[ 10 ] << 8 | sensor_recv_buf[ 11 ];

                uint8_t out_txt[ 64 ] = { 0 };
                sprintf( out_txt, "1号探头:%d mm ", sensor1_distance ), Serial.print( ( char* )out_txt );
                sprintf( out_txt, "2号探头:%d mm ", sensor2_distance ), Serial.print( ( char* )out_txt );
                sprintf( out_txt, "3号探头:%d mm ", sensor3_distance ), Serial.print( ( char* )out_txt );
                sprintf( out_txt, "4号探头:%d mm ", sensor4_distance ), Serial.print( ( char* )out_txt );
                Serial.println();
            }
        }
        send_timecnt = millis();
    }
/*  modbus 通讯举例:
    读取
    例1：读取探头1测量值
    主机：01 03 01 06 00 01 65 F7
    从机：01 03 02 01 3C B9 C5
    说明：传感器地址为0x01，1号探头测距实时值为0x013C=316mm。

    例2：读取探头2测量值
    主机：01 03 01 07 00 01 34 37
    从机：01 03 02 09 1B FE 1F
    说明：传感器地址为0x01，2号探头测距实时值为0x091B=2331mm。

    例3：读取探头2、探头3、探头4测量值
    主机：01 03 01 07 00 03 B5 F6
    从机：01 03 06 00 FA 02 93 09 7A 8F 47
    说明：传感器地址为0x01，2号探头实时值为0x00FA=250mm，3号探头实时值为0x0293=659mm，4号探头实时值为0x097A=2426mm。
*/
#elif MODULE_VER == MB_VER
    static uint32_t send_timecnt = 0;
    if ( millis() - send_timecnt > 500 )
    {
        // uint8_t  send_cmd_buf[] = { 0x01, 0x03, 0x01, 0x07, 0x00, 0x03, 0xB5, 0xF6 };  //读取探头2、探头3、探头4测量值
        uint8_t  send_cmd_buf[] = { 0x01, 0x03, 0x01, 0x06, 0x00, 0x04, 0xA5, 0xF4 };  //读取探头1,2,3,4测量值
        uint16_t cmd            = send_cmd_buf[ 2 ] << 8 | send_cmd_buf[ 3 ];
        softSerial.write( send_cmd_buf, 8 );  // 发送 modbus 指令给传感器

        uint8_t  read_reg_num       = send_cmd_buf[ 5 ];
        uint8_t  response_buf[ 32 ] = { 0 };
        uint16_t len                = softSerial.readBytes( response_buf, 5 + read_reg_num * 2 );
        // for ( int i = 0; i < len; i++ )  //调试输出
        // {
        //     uint8_t tmp[ 8 ] = { 0 };
        //     sprintf( tmp, "%02x ", response_buf[ i ] );
        //     Serial.print( ( char* )tmp );
        // }
        // Serial.println();

        uint16_t calc_checksum = crc16( ( uint8_t* )&response_buf, len - 2 );
        uint16_t recv_checksum = response_buf[ len - 2 ] << 8 | response_buf[ len - 1 ];
        if ( ( calc_checksum == recv_checksum ) && ( response_buf[ 1 ] == 0x03 ) )
        {
            uint8_t out_txt[ 64 ] = { 0 };
            sprintf( out_txt, "1号探头:%d mm ", response_buf[ 3 ] << 8 | response_buf[ 4 ] ), Serial.print( ( char* )out_txt );
            sprintf( out_txt, "2号探头:%d mm ", response_buf[ 5 ] << 8 | response_buf[ 6 ] ), Serial.print( ( char* )out_txt );
            sprintf( out_txt, "3号探头:%d mm ", response_buf[ 7 ] << 8 | response_buf[ 8 ] ), Serial.print( ( char* )out_txt );
            sprintf( out_txt, "4号探头:%d mm ", response_buf[ 9 ] << 8 | response_buf[ 10 ] ), Serial.print( ( char* )out_txt );
            Serial.println();
        }
        send_timecnt = millis();
    }

/*  ff 协议说明
    帧数据 说明 字节
    帧头 固定为 0XFF 1 字节
    Data_1H 1 号探头测量距离数据的高 8 位 1 字节
    Data_1L 1 号探头测量距离数据的低 8 位 1 字节
    Data_2H 2 号探头测量距离数据的高 8 位 1 字节
    Data_2L 2 号探头测量距离数据的低 8 位 1 字节
    Data_3H 3 号探头测量距离数据的高 8 位 1 字节
    Data_3L 3 号探头测量距离数据的低 8 位 1 字节
    Data_4H 4 号探头测量距离数据的高 8 位 1 字节
    Data_4L 4 号探头测量距离数据的低 8 位 1 字节
    SUM 通讯校验和 1 字节
*/
#elif MODULE_VER == FF_VER  // {} 等待 ff 协议数据
    if ( softSerial.available() )
    {
        static uint8_t  recv_buf[ 10 ] = { 0 };
        static uint16_t recv_buf_cnt   = 0;
        uint16_t        len            = softSerial.readBytes( ( uint8_t* )&recv_buf, 10 );

        if ( len == 10 && recv_buf[ 0 ] == 0xff )
        {
            uint8_t sum = add_sum( ( uint8_t* )recv_buf, 9 );
            if ( sum == recv_buf[ 9 ] )
            {
                uint16_t sensor1_distance = recv_buf[ 1 ] << 8 | recv_buf[ 2 ];
                uint16_t sensor2_distance = recv_buf[ 3 ] << 8 | recv_buf[ 4 ];
                uint16_t sensor3_distance = recv_buf[ 5 ] << 8 | recv_buf[ 6 ];
                uint16_t sensor4_distance = recv_buf[ 7 ] << 8 | recv_buf[ 8 ];

                static char out_txt[ 200 ] = { 0 };
                sprintf( out_txt, "1号探头:%d mm 2号探头:%d mm 3号探头:%d mm 4号探头:%d mm \r\n", sensor1_distance, sensor2_distance, sensor3_distance, sensor4_distance );
                Serial.print( out_txt );
            }
        }
    }
#endif

    static uint32_t led_cnt = millis();
    if ( millis() - led_cnt > 100 )
    {
        digital_toggle( LED_BUILTIN );
        led_cnt = millis();
    }
}
// main.cpp
